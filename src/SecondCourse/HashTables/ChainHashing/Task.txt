Ваша программа должна поддерживать следующие типы запросов:
• add string: добавить строку string в таблицу. Если такая
строка уже есть, проигнорировать запрос;
• del string: удалить строку string из таблицы. Если такой
строки нет, проигнорировать запрос;
• find string: вывести «yes» или «no» в зависимости от того,
есть в таблице строка string или нет;
• check i: вывести i-й список (используя пробел в качестве разделителя); если i-й список пуст, вывести пустую строку.
При добавлении строки в цепочку, строка должна добавляться в начало цепочки.
    Формат входа. Первая строка размер хеш-таблицы m. Следующая строка содержит количество запросов n.
Каждая из последующих n строк содержит запрос одного из перечисленных выше четырёх типов.
    Формат выхода. Для каждого из запросов типа find и check выведите результат в отдельной строке.
Ограничения. 1 ≤ n ≤ 10^5; n/5 ≤ m ≤ n. Все строки имеют длину
от одного до пятнадцати и содержат только буквы латинского алфавита.
        Пример.
    Вход:
5
12
add world
add HellO
check 4
find World
find world
del world
check 4
del HellO
add luck
add GooD
check 2
del good
    Выход:
HellO world
no
yes
HellO
GooD luck
ASCII коды букв ’w’, ’o’, ’r’, ’l’, ’d’ равны 119, 111, 114, 108, 100, соответственно. Поэтому
h(world) = (119 + 111 × 263 + 114 × 263^2 + 108 × 263^3 + 100 × 263^4 mod 1 000 000 007) mod 5 = 4 .
Оказывается, что h(HellO) тоже равно четырём. Поскольку новые строки добавляются в начало списка,
после второго запроса add список содержит строки HellO и world (именно в таком порядке).
Строка World не находится, а world находится.
После удаления строки world в цепочке 4 остаётся только строка HellO. И так далее.